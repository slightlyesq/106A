/*
 * File: Breakout.java
 * -------------------
 * Name:
 * Section Leader:
 * 
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.*;
import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class Breakout extends GraphicsProgram {
/* test */
/** double test */
	private GRect paddle;
	private GObject gobj;
	private double lastX;
	private double lastY;
	private GOval ball;
	private double vx;
	private double vy;
/** Width and height of application window in pixels */
	public static final int APPLICATION_WIDTH = 400;
	public static final int APPLICATION_HEIGHT = 600;

/** Dimensions of game board (usually the same) */
	private static final int WIDTH = APPLICATION_WIDTH;
	private static final int HEIGHT = APPLICATION_HEIGHT;

/** Dimensions of the paddle */
	private static final int PADDLE_WIDTH = 60;
	private static final int PADDLE_HEIGHT = 10;

/** Offset of the paddle up from the bottom */
	private static final int PADDLE_Y_OFFSET = 30;

/** Number of bricks per row */
	private static final int NBRICKS_PER_ROW = 10;

/** Number of rows of bricks */
	private static final int NBRICK_ROWS = 10;

/** Separation between bricks */
	private static final int BRICK_SEP = 4;

/** Width of a brick */
	private static final int BRICK_WIDTH =
	  (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;
	//(400 - (10 - 1) * 4) / 10 => (400-36)/10 = 364 = 36
	//360 + 4*9 = 396
/** Height of a brick */
	private static final int BRICK_HEIGHT = 8;

/** Radius of the ball in pixels */
	private static final int BALL_RADIUS = 10;

/** Offset of the top brick row from the top */
	private static final int BRICK_Y_OFFSET = 70;

/** Number of turns */
	private static final int NTURNS = 3;
	boolean mouseClicked = false;
	int brickCounter = 100;
	int moverCounter = 0;
/** Runs the Breakout program. */
	
	public void init() {
		//System.out.println("inside init and counter "+counter);
		addMouseListeners();
		paddleMaker();
		System.out.println("HOW MANY TIMES IS INIT CALLED");
		
		double yCoord = 80;
		/**nested loop to create the bricks**/
		for(int y = 0;y<10;y++){
			double xCoord = 2;
			double newYCoord = yCoord - (8*y);
			for(int x = 0;x<10;x++){
				rectMaker(xCoord,newYCoord,y);
				xCoord = xCoord + BRICK_WIDTH + BRICK_SEP;
			}
		}
		ball = new GOval(WIDTH/2 - BALL_RADIUS,HEIGHT-PADDLE_HEIGHT-BALL_RADIUS*2,BALL_RADIUS*2,BALL_RADIUS*2);
		ball.setFilled(true);
		ball.setFillColor(Color.BLACK);
		add(ball);
		ball.sendToBack();
	}
	
	public void run() {
		while(true){
			if(mouseClicked == true){
				System.out.println("I'm in the run behind the bool");
				while(true){
					if(brickCounter == 0){
						break;
					}
					//incremental movement
					/*
					if(moverCounter < 1000){
						ballMover();
					}
					else{
						break;
					}
					*/
					ballMover();
					collision();
					moverCounter++;
					pause(10);
				}
				break;
			}
		}
		//I could remove the ball and paddle and println("you win!");
		/**if a ball bounces off the top or bottom wall, all you need to do is reverse the sign of vy.
		//bounces off the side walls simply reverse the sign of vx
		//public GObject getElementAt(double x, double y);
		//x and y are coordinates of the ball. if the point (x,y) is underneath an object, this 
		//call returns the grpahical object with which the ball has collided. 
		//If there are no objects at the point (x,y), you'll get the value null.
		**/
	}
	
	private void collision() {
		
		double ballXNLoc = ball.getX() + BALL_RADIUS; double ballXELoc = ball.getX() + 2*BALL_RADIUS; double ballXSLoc = ballXNLoc; double ballXWLoc = ball.getX();
		double ballYNLoc = ball.getY(); double ballYELoc = ball.getY()+BALL_RADIUS; double ballYSLoc = ball.getY()+2*BALL_RADIUS; double ballYWLoc = ballYELoc;//remmeber this is the top left hand corner
		//okay i need the points for the other parts of the ball, NW NE SE SW
		
		gobj = getElementAt(ballXNLoc, ballYNLoc);
		if(gobj != null && gobj.getClass() != ball.getClass()) {//this checks for a collision at the top left hand corner of the rectangle the GOval is
			System.out.println("am i in any of these");
			remove(gobj);
			vy = -vy;
			return;
		}
		
		gobj = getElementAt(ballXELoc, ballYELoc);
		if(gobj  != null && gobj.getClass() != ball.getClass()) {
			System.out.println("am i in any of these");
			remove(gobj);
			vx = -vx;
			return;
		}
		
		gobj = getElementAt(ballXSLoc, ballYSLoc);
		if(gobj != null && gobj.getWidth() == PADDLE_WIDTH){
			//paddle bounce
			vy = -vy;
			return;
		}
		if(gobj != null && gobj.getClass() != ball.getClass()) {
			System.out.println("am i in any of these");
			remove(gobj);
			vy = -vy;
			return;
		}
		
		gobj = getElementAt(ballXWLoc, ballYWLoc);
		if(gobj != null && gobj.getClass() != ball.getClass()) {
			System.out.println("am i in any of these");
			remove(gobj);
			vx = -vx;
			return;
		}
		
		//WHATEVER loop through the 4 corners and then whenever one is not equal to null apply appropriate velocity change
		
		/**handles wall bouncing
		 */
		if(ballYNLoc == HEIGHT){
			vy = -vy;
			System.out.println("Ive hit the top");
		}
		
		//if(ballXELoc == WIDTH || ballXWLoc == 0 || ballXLoc + 20 == WIDTH || ballXLoc + 20 == 0){
		if(ballXELoc == WIDTH || ballXWLoc == 0){
			vx = -vx;
			System.out.println("Ive hit the sides");
		}
		if(ballYNLoc == 0){
			vy = -vy;
		}
		if(ballYSLoc == 600){
			//reset ball to start at paddle
			//increment turn counter
			System.out.println("AM I AT THE BOTTOM?");
			mouseClicked = false;
			
			paddle.setLocation((WIDTH/2)-(PADDLE_WIDTH/2),HEIGHT-PADDLE_HEIGHT);
			ball.setLocation(WIDTH/2 - BALL_RADIUS,HEIGHT-PADDLE_HEIGHT-BALL_RADIUS*2);
			vx=0;
			vy=0;
		}
		
		return;
		
		//(X,Y)topL, (X,Y+Diam)botL, (X+Diam, Y)topR, (X+Diam, Y+Diam) botR, (X+rad,Y) north, (X+Diam,Y+rad) east, (X+rad,Y+diam) south, (X, Y+rad) west
	}
	public void paddleMaker() {
		paddle = new GRect((WIDTH/2)-(PADDLE_WIDTH/2),HEIGHT-PADDLE_HEIGHT,PADDLE_WIDTH,PADDLE_HEIGHT);
		paddle.setFilled(true);
		paddle.setFillColor(Color.BLACK);
		add(paddle);
	}
	public void mouseClicked(MouseEvent e) {
		System.out.println("Is this being called even though mouse was not repeatedly clicked?");
		if(mouseClicked == false){
			launchBall();
		}
		mouseClicked = true;
	}
	
	public void mouseMoved(MouseEvent e) {
		if(mouseClicked == true){
			lastX = paddle.getX();
			lastY = paddle.getY();
			if(lastX+(e.getX() - lastX) <= 340){//make sure we stay in window
				paddle.move(e.getX() - lastX, 0);
			}
		}
	}
	
	private void launchBall() {
		
		//RandomGenerator rgenX = RandomGenerator.getInstance();
		//vx = rgenX.nextDouble(1.0, 3.0);
		//if(rgenX.nextBoolean(0.5)) vx = -vx;
		//RandomGenerator rgenY = RandomGenerator.getInstance();
		//vy = rgenY.nextDouble(1.0, 3.0);
		vx = 2.0; vy=2.0;
		ball.move((vx*1),(-vy*1));
		
	}
	
	private void ballMover() {
		ball.move(vx*1,-vy*1);
	}
	
	private void rectMaker(double x, double y, int yRowNum){
		GRect rect = new GRect(x, y, BRICK_WIDTH, BRICK_HEIGHT);
		rect.setFilled(true);
		if(yRowNum == 99){
			rect.setFillColor(Color.BLACK);
		}
		if(yRowNum < 2){
			rect.setFillColor(Color.CYAN);
		}
		
		else if(yRowNum < 4){
			rect.setFillColor(Color.GREEN);
		}
		
		else if(yRowNum < 6){
			rect.setFillColor(Color.YELLOW);
		}
		
		else if(yRowNum < 8){
			rect.setFillColor(Color.ORANGE);
		}
		
		else{
			rect.setFillColor(Color.RED);
		}
		
		add(rect);
	}

}
